syntax = "proto3";

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  scope: FILE
  package_name: "transaction.protocol"
  flat_package: true
};

message Ack {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";
}

message Nack {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";
}

message MVCCVersion {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string k = 1;
    uint64 v = 2;
    string version = 3;
}

message ReadRequest {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    repeated string keys = 1;
}

message ReadResponse {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    repeated MVCCVersion values = 1;
}

message Transaction {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    repeated MVCCVersion rs = 2;
    repeated MVCCVersion ws = 3;
}

message Partition {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    repeated string txs = 2;
}

message PartitionResponse {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    repeated string conflicted = 2;
    repeated string applied = 3;
}

message Batch {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    repeated Transaction transactions = 2;
    map<string, Partition> partitions = 3;
    string coordinator = 4;
}

message GetBatch {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
}

message IncBatch {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
}

message GetBatchResponse {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    uint32 count = 1;
}

message Epoch {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    repeated Batch batches = 2;
}

message RequestOffset {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";
}

message ResponseOffset {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    uint64 offset = 1;
}