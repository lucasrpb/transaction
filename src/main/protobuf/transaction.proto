syntax = "proto3";

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  scope: FILE
  package_name: "transaction.protocol"
  flat_package: true
};

message Transaction {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    map<string, VersionedValue> rs = 2;
    map<string, VersionedValue> ws = 3;
}

message Partition {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    repeated string txs = 2;
}

message PartitionResponse {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    repeated string conflicted = 2;
    repeated string applied = 3;
}

message PartitionRequest {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    repeated string partitions = 2;
}

message PartitionRelease {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    repeated string partitions = 2;
}

message Batch {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    string coordinator = 2;
    map<string, Transaction> transactions = 3;
    map<string, Partition> partitions = 4;
    uint32 total = 5;
}

message Epoch {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string id = 1;
    repeated Batch batches = 2;
}

message Ack {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";
}

message Read {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    repeated string keys = 1;
}

message VersionedValue {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    string version = 1;
    uint64 value = 2;
}

message ReadResult {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";

    map<string, VersionedValue > values = 1;
}

message Nack {
    option (scalapb.message).extends = "transaction.Command";
    option (scalapb.message).companion_extends = "transaction.Command";
}
