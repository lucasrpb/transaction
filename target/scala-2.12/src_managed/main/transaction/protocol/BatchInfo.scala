// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package transaction.protocol

@SerialVersionUID(0L)
final case class BatchInfo(
    id: _root_.scala.Predef.String = "",
    partitions: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    coordinator: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[BatchInfo] with scalapb.lenses.Updatable[BatchInfo] with transaction.Command {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      partitions.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      }
      
      {
        val __value = coordinator
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      partitions.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      {
        val __v = coordinator
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): transaction.protocol.BatchInfo = {
      var __id = this.id
      val __partitions = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.partitions)
      var __coordinator = this.coordinator
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = _input__.readString()
          case 18 =>
            __partitions += _input__.readString()
          case 26 =>
            __coordinator = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      transaction.protocol.BatchInfo(
          id = __id,
          partitions = __partitions.result(),
          coordinator = __coordinator
      )
    }
    def withId(__v: _root_.scala.Predef.String): BatchInfo = copy(id = __v)
    def clearPartitions = copy(partitions = _root_.scala.Seq.empty)
    def addPartitions(__vs: _root_.scala.Predef.String*): BatchInfo = addAllPartitions(__vs)
    def addAllPartitions(__vs: Iterable[_root_.scala.Predef.String]): BatchInfo = copy(partitions = partitions ++ __vs)
    def withPartitions(__v: _root_.scala.Seq[_root_.scala.Predef.String]): BatchInfo = copy(partitions = __v)
    def withCoordinator(__v: _root_.scala.Predef.String): BatchInfo = copy(coordinator = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 2 => partitions
        case 3 => {
          val __t = coordinator
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => _root_.scalapb.descriptors.PRepeated(partitions.iterator.map(_root_.scalapb.descriptors.PString).toVector)
        case 3 => _root_.scalapb.descriptors.PString(coordinator)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = transaction.protocol.BatchInfo
}

object BatchInfo extends scalapb.GeneratedMessageCompanion[transaction.protocol.BatchInfo] with transaction.Command {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[transaction.protocol.BatchInfo] with transaction.Command = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): transaction.protocol.BatchInfo = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    transaction.protocol.BatchInfo(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[transaction.protocol.BatchInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      transaction.protocol.BatchInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TransactionProto.javaDescriptor.getMessageTypes.get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TransactionProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = transaction.protocol.BatchInfo(
  )
  implicit class BatchInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, transaction.protocol.BatchInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, transaction.protocol.BatchInfo](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def partitions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.partitions)((c_, f_) => c_.copy(partitions = f_))
    def coordinator: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.coordinator)((c_, f_) => c_.copy(coordinator = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val PARTITIONS_FIELD_NUMBER = 2
  final val COORDINATOR_FIELD_NUMBER = 3
  def of(
    id: _root_.scala.Predef.String,
    partitions: _root_.scala.Seq[_root_.scala.Predef.String],
    coordinator: _root_.scala.Predef.String
  ): _root_.transaction.protocol.BatchInfo = _root_.transaction.protocol.BatchInfo(
    id,
    partitions,
    coordinator
  )
}
