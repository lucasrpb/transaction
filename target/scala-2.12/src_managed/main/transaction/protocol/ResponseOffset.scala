// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package transaction.protocol

@SerialVersionUID(0L)
final case class ResponseOffset(
    offset: _root_.scala.Long = 0L
    ) extends scalapb.GeneratedMessage with scalapb.Message[ResponseOffset] with scalapb.lenses.Updatable[ResponseOffset] with transaction.Command {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = offset
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = offset
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): transaction.protocol.ResponseOffset = {
      var __offset = this.offset
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __offset = _input__.readUInt64()
          case tag => _input__.skipField(tag)
        }
      }
      transaction.protocol.ResponseOffset(
          offset = __offset
      )
    }
    def withOffset(__v: _root_.scala.Long): ResponseOffset = copy(offset = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = offset
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(offset)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = transaction.protocol.ResponseOffset
}

object ResponseOffset extends scalapb.GeneratedMessageCompanion[transaction.protocol.ResponseOffset] with transaction.Command {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[transaction.protocol.ResponseOffset] with transaction.Command = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): transaction.protocol.ResponseOffset = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    transaction.protocol.ResponseOffset(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[_root_.scala.Long]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[transaction.protocol.ResponseOffset] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      transaction.protocol.ResponseOffset(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TransactionProto.javaDescriptor.getMessageTypes.get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TransactionProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = transaction.protocol.ResponseOffset(
  )
  implicit class ResponseOffsetLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, transaction.protocol.ResponseOffset]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, transaction.protocol.ResponseOffset](_l) {
    def offset: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.offset)((c_, f_) => c_.copy(offset = f_))
  }
  final val OFFSET_FIELD_NUMBER = 1
  def of(
    offset: _root_.scala.Long
  ): _root_.transaction.protocol.ResponseOffset = _root_.transaction.protocol.ResponseOffset(
    offset
  )
}
